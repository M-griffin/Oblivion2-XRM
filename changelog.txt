Change Log Update (00.00.151)
* 3023-06-15 -> 2023-10-07
+ Revision 2 Rework consists of a break down and rewrite of the core system to resolve system and deallocation issues.
+ Updated Telnet Responses to only reply one to avoid loops
+ Fix for ANSI detections, if it contains, then default to CP437, Set max rows/cols to 100, and undetected
  defaults to 80x24, add some logging on bad utf8 sequences causing lots of logging
+ Added ESC[6n Cursor Position Detection for Screen size for Terminals and Telnet Clients that don't support NAWS
+ Cleaner Separation of Source and Header Files, lots of Core Refactoring for Cleaner Session deallocation.
+ Update Node Number handling and logging to properly capture which logging per active session.
+ Added IP Addresses on connection statements to review where connection are coming from
+ Fixed Matrix menu redraws on lightbars that will turn the cursor back off when it's a lightbar menu on redisplays.
+ Fixed SQLiteWrapped De allocation issues.
+ Added Human Shield or ESC Twice at login that will disconnects after 8 seconds for Bot hammering.
+ Added new WARN logging level, for items that are not errors but can be considered invalid.
+ Fixed circular dependencies from the logging and configuration files.
+ Changed both Logging and Encoding from Allocated Singletons to Reference Singletons for smarter allocation handling and usage.
+ Updated Project files for Release builds that will create smaller and more optimized executables.
- Removed incomplete FormManager for now, needs to be rewritten and wasn't in use yet.
- Removed Window, OSX project builds, right now only working with Linux and Docker to keep things simple for early development.
  Trying to maintain too many platforms and manual build system wastes too much time in the early stages.
- Files logging is temporally removed. Along with yaml formatting of output, wastes too much screen real estate

Change Log Update (00.00.150)
* 2022-05-26
+ Updates for ReadTheDocs
  Created Build Guilds for Linux, OS/X, Docker.
+ Mass Cleanup of source files typo cleanups.

Change Log Update (00.00.149)
* 2022-05-08
+ Corrections to OSX Project, Makefile(s) and dependencies in the Install Doc.

Change Log Update (00.00.148)
* 2022-05-06
+ Setup first user created on a new system will be updated to SysOp access
  This makes configuring and system setup a lot easier than trying to manually update the SQLite database
+ Also Did some refactoring on the mod_signup module re-using code and passing in functions
  instead of code duplication.  Some more work can be done here later on.

Change Log Update (00.00.147)
* 2022-05-05
+ Created Dockerfile (Dockerfile.linux-image.build) and docker-compose for generating
  a local Docker image with build environment from the pulled branch.
  Initial testing and recompiles can be made, but it not setup for GIT pushes.
  WIP - Addon to this would be to setup GIT commits and changes for active development.
+ Fixed Yaml (xml_config.yaml) Load issues.
  config.hpp hidden_input_field_char was an unsigned char which seems to be an
  issue in the latest yaml-cpp v7.0.  Converted the variable to a std::string.
+ Added a missed "use_address" configuration option.

Change Log Update (00.00.146)
* 2019-07-27
+ Entire Project update and rework so each environment strictly uses it's own
  folder for storing it's projects make files. This avoid one app overwrite another
  and one environment overwritten another.
+ Makefiles, each project has a .mk Makefile now.  Developer paths are also removed
  and each make file per environment is now easier to compile from the command line.
  (Exception is windows) since it needs hard coded library paths, (Code Lite recommended here)
+ Linux (build-linux.sh) and OSX (build-osx.sh) script file are now updated and reworked to
  build the complete project from the command line easier then ever before.
  These scripts will now build all dependencies, tools, unit tests and the full projects
  from the script located in the Build folder.  All compiled executables are copied back to the
  build folder once completed so you can run you system right away.
  The build script now has an added command line parameter -j# (# being the number of CPU Core)
  using a number greater then 1 on multi-core machines will increate the command line compile time
  (Example I have 4 CPU's each with 2 Cores - I use -j8 and it compiles pretty quick on my Desktop)
  And in my VMware's I allocate 2 CPU's usually and it's a bit slower to compile.
+ Moved OSX-INSTALL.TXT to the Build/Docs folder, and also created an initial LINUX-INSTALL.TXT
  this is mainly for installing libraries and dependencies prior to building the project and
  should make things a lot easier.
+ Added Socket HOT Fixes for some issues with SDL_Net.  Also small updates on creating the new
  LOG Folder when it doesn't exist on startup of the program the first time.
+ Project dependency cleanup, removed libs and paths no longer needed.
+ NOTE- the MenuConvert and PromptConvert tools still used boost, eventually I'll remove it and
  use the new internal directory methods I've re-written.

Change Log Update (00.00.145)
* 2019-01-03
+ Fixed some logging level issues, missed logging on encoding so wasn't
  reading the pre-set level from the config file properly.
+ Also made all selected logging levels output to console as well as file.
+ Updated ANSI FSE Templates to 1 extra column to the right.

Change Log Update (00.00.144)
* 2019-01-01 - 2019-01-02
+ Fixed Typo on Critical Logging text.
+ Fixed missing () parenthesis on SDL Socket Error Method passed to logging.
+ Corrections to Ansi Parser, CR should only move to beginning of Line, LF should
  only move down a line. This can different from a telnet client that gets a
  variety. Then need to be pre-normalized for consistence display with CRLF on
  all screens. This fixes cross platform ANSI Templates.
+ Some more code cleanup, removed debugging for final testing, Putty, EtherTerm
  and Linux terminal on both platform are now all matching output and display properly.
  Next, final OSX testing.
+ OSX Project tested and synced. All Good.

Change Log Update (00.00.143)
* 2018-12-24 - 2018-12-31
+ Starting roughing out new logging class for different logging levels. Added new
  default INFO logging level to CONFIG and incremented file version. Config can be
  deleted and auto re-created for latest version. Also making this a header only class.
  Testing example:  Logging::instance()->xrmLog<Logging::INFO_LOG>("Test1", 2, 4.5);
  Logging with export to YAML and or Console Text for logging level set in config.
+ More work on the logging system using variadic templates for parameter packs.
+ Add missed type.. next to setup filtering on log levels, add buffer queue for
  async log writes.
+ A little more on testing logging yaml console output. File output i think will be
  queued and handled by main thread leaving the i/o thread free for all session / socket work.
+ WIP - Large Refactoring for new logging and output noise reduction. Startup has been
  reworked a little, and next is to go through remaining systems to move output to
  console, info, debug logging levels
+ Cont. Logging and Cleanup. Ready for Multi-Platform Testing on Encoding and Logging next.
+ Initial Linux Testing Completed, Next check OSX
+ Updated OSX projects to sync with Linux and Windows. Notice some templates are off,
  think adjustments are needed for new lines

Change Log Update (00.00.142)
* 2018-10-31 - 2018-01-23
+ Started initial work on the Full Screen message editor
+ Initial Templates are now displaying and expanded depending on users screen size.
+ Fixed issue with ESC detection on SingleHotKey input vs GetLine Input Had to
  updated to push tailing '\0' on Individual ESC so it would detect it wasn't
  a sequence such as arrow key(s).
+ Rolled back some test changes on Ansi Parser
  First Step in Ansi Parser Update, Screen Buffer character sequence store to
  std::string from unsigned char.  Next work through the ansi parser calls one
  by one to see where things break.
+ Added Initial code for checking utf-8 sequence for rework
+ Small fixes to the Level editor for boolean output
+ Unit Test corrections.
+ Found some issues with High-Ascii and UTF-8 parsing of string. Started unit test
  for drilling down. Now need to update the rest of the methods to properly handle
  high ASCII mix-ins
+ Rewrote numberOfCharacters, now properly handles mix of HighAscii and Utf-8 when
  counting glyphs vs. bytes.
+ Updated Erase String to handle High ASCII with Unicode mix.
+ Added using Tests for updated methods covering extras (HighAscii Tests).
+ Cleaned up some message warning for stub classes not yet reworked.
+ Updated the State_Manager - which handles incoming data from the client to parse
  and handle High ASCII input with Multi-bytes sequence parsing.
+ Worked on the Ansi Sequence parser to now handle glyphs instead of single characters.
  Some more work need to be done to pass the current encoding used or selected at login
  since chars > 127 - 255 in UTF-8 are considered partially 2 Bytes glyphs and there is
  no real working detection to differentiate them from high ASCII. Right now it's hard
  coded for High ASCII until encoding is passed through. (Temp Fix).
+ Started a Map cache of the translation table. This will store the UTF-16 WIDE CP437
  translations with their 8 bit CP437 characters for quick translations back from UTF-8.
+ Initial setup for tracking encoding selection on connection, then deciding on internal
  translations to single encoding for internal usage.
+ Creating new Encoding class singleton to separate encoding methods from CommonIO methods.
  The singleton will keep pre-loaded mappings for object sharing vs each instance having a
  separate copy. Creating Encoding-tests branch to further test internal UTF-8 internal processing.
+ Also created a Multi-Byte to Wide for using the new Mappings, and updated the existing
  Wide to Milti-Byte. Left is to write and test the translation from UTF-8 back to CP437.
+ Added new Encoding class Files.
+ Corrected some Initialization on the Encoding Class.
+ ANSI screens and Menu prompts are now default Encoded UTF-8 on load, Parsers are testing
  well, next to Decode back to CP437 on output.
+ Initial Tests from Linux Terminal To Windows Machine is good now, had to add Win API specific
  translations for Wide and MultiByte Characters.
  Initial Tests from Windows CP437 on CP437 -> UTF8 -> CP437 is working much better now.
  More internal systems now need to be converted to UTF-8.
+ Sync Linux Project, Also handle UTF-8 -> UCS2 / UTF-16 conversion and exclude extra null bytes.
+ Updated OSX Project and Encoding to Convert Cp437 -> UCS2 -> UTF8 and back, long struggle.
  Found some issues with .yaml file reading errors which need to be debugged on OSX now.
+ Debugged issues with YAML and loading the CONFIG Dao multiple times per sessions. Don't
  appears to have issues with other instances for Text Prompts, Menu's Etc.. CONFIG should
  anyway's be moved to a single shared instance and removed for loading in the Menu Base Constructor.
  So far commented out and using default constructor no longer crashes in OSX. Other Platforms
  not an issue but lets make this smarted for all.
  NOTE: out.SetStringFormat(YAML::DoubleQuoted);  could be a nice option but ass double quotes
  around all keys as well as string values.
+ Re sync Linux Project with latest changes. Notes, xrm convert project need encoding and should
  be updated lateron to encoding data to UTF-8 for yaml files.
+ Re-enabled older idea that was already in place to use Gobal Node Manager "Communicator"
  to store the configuration. Updated code to pull this for session instances and then pass this
  around as needed. - Next Back to Encoding..
+ Adding Encoding for On Text Generated Internal Methods Also some Internal cleanup.
+ Initial Encoding Completed for Internal UTF-8, Continue Testing and debugging on Windows now.
  Reworked some of the editors as well.
+ Fixed several issues with encoding and display output of screens. Especially the Full Screen editor
  templating which found most of the issues. code is full of debugging,  cleanup will follow!!
+ Removed Debugging out. Next add some logging levels and get rid of a lot of STDOUT debugging.

Change Log Update (00.00.141)
* 2018-10-31
+ Completed Level Editor.

Change Log Update (00.00.140)
* 2018-10-31
+ Level Editors display screen set, next is to plug in all fields for
  making edits for saving changes.

Change Log Update (00.00.139)
* 2018-10-30
+ Setup the Prompt and Display Text Files for the Level Editor Screen Next is
  to plug in the for screen display.

Change Log Update (00.00.138)
* 2018-10-30
+ Added Copy Levels for the Level Editor. Next is work on Editing the Individual
  level field options.

Change Log Update (00.00.137)
* 2018-10-27
+ Correction to type-o on iLevel case in SQL Field Creation.
+ Added sort on Level in Level Editor display screen.

Change Log Update (00.00.136)
* 2018-10-27
+ Fixed checking on Populated list before clearing in Editors.

Change Log Update (00.00.135)
* 2018-10-20
+ Fixed Issue with Foreign Key on for Security Table on User Table.

Change Log Update (00.00.134)
* 2018-10-14
+ Some work on the Level Editor save, update, delete and copy methods.
+ Next is to work on display and editing of the fields and flags.

Change Log Update (00.00.133)
* 2018-10-04
+ Wip on Level Editor, Started work on Level Display screen.

Change Log Update (00.00.132)
* 2018-10-03
+ Updated DbStartup Class to generate default Access Levels for first
  time table creating and system defaults. This will also be used for testing the Level Editor.
+ Added Notes on what table exists when the startup does table checking.

Change Log Update (00.00.131)
* 2018-10-03
+ WIP Rework for Level Editor
+ Fixed Editing formatting and styling that was off.

Change Log Update (00.00.130)
* 2018-09-16
+ Created OSX_INSTALL.TXT for compiling the program
+ Basic dependency setup for OS/X using Homebrew package manager.

Change Log Update (00.00.129)
* 2018-08-19
+ Added in the Level Access Mod to the menu system. Now slowly reworking
  the initial display to pull and display all levels and add new ones.
+ Sync OSX Project with Latest Module Additions
+ Sync Linux project for latest module file additions
+ Also updates new message and file area modules with their own definitions.

Change Log Update (00.00.128)
* 2018-08-19
+ Renamed Module Config_Sys to FormManager Editor
+ Added Initial Module Files for Message Base and File Areas Editors for rework.

Change Log Update (00.00.127)
* 2018-08-18
+ Added AccessLevelDao to Db_Startup class to create table if it doesn't exist.
+ Added new AccessLevelDao method to lookup access_level by level.

Change Log Update (00.00.126)
* 2018-08-18
+ Added Bool Flags for Access_Level models, each individual level can have it's own limits on/off
+ Updated DAO objects to match new Access Level object.
+ Some cleanup on text

Change Log Update (00.00.125)
* 2018-08-15
+ Initial Stub for Level Editor. Started from rework of Menu editor.

Change Log Update (00.00.124)
* 2018-08-12
+ Created default Build folder for Runtime execution with default menus,
  prompts, and ANSI screen files.
+ Added some build scripts for Linux and OSX to update Makefiles and
  build the executable without Codelite IDE.  Package dependences still
  need to be installed and available.
- Starting on Level Editor next.

Change Log Update (00.00.123)
* 2018-08-05
+ Sync OSX Project.
+ Caught and fixed some issues with CppCheck.
+ Sync Linux Project with latest changes, also small correction on
  SqliteWrapped for error output.
+ Added Challenge Question and Answer to User Extended Field Editor.
+ Updated User Editor, when updating an existing password or challenge
  answer, use the existing salt because it's used by both, so if one
  changes it, the other would have issues.

Change Log Update (00.00.122)
* 2018-08-04
+ Tested User Editor, fixes small display issues and some field
  key displays

Change Log Update (00.00.121)
* 2018-08-03
+ Added password update for user editor.
  NOTE: need to add challenge question/answer updates too.
+ Finished Most of the Field Inputs, need to ass one for setting password
  w/ encryption then saving final user record changes.
+ Completed about half of the asking input on prompts for extended users.
+ Added new Extended Prompts for User Fields. Next is to code up their
  input and updating the user record.

Change Log Update (00.00.120)
* 2018-08-02
+ Updated SQLiteWrapped Code Base. Fixed Casing issues and updated some
  methods with more descriptive naming.

Change Log Update (00.00.119)
* 2018-07-31
+ Updates to the extended display of colors.
+ Added Screen display prompts for user Extended Display. Next is to
  code setting all fields on changes.
+ A bit more work on normalizing theme colors in the editors. Added new
  getDefaultPromptRaw which will not try to parse to ESC sequences and
  added extra leading and input colors, this is for displaying and
  building screen with screen display prompts vs input prompts.

Change Log Update (00.00.118)
* 2018-07-29
+ Completed Display of User Extended Fields for Editing. Also worked in
  theme colors, next is to update the fields on input, write a password
  update method, then a final user save method.
+ Menu editor is now using more theme colors for borders and title information
  and hard coded screen elements. User Editor will follow suite.
+ Added Mod_Base default box, prompt, and stat colors, for more use of
  theme colors in modules.
+ Added MenuEditor the menu field text display to the prompts file along
  with menu option display, and the new getDisplayPrompt to pull instead
  of displaying on the fly so the screen can be build first before pushing to
  the user.
+ Also Added to the User Editor to follow the same normalization once it's ready.
+ Some Cleanup on, next Update the other displays. Also lateron add MCI Codes
  and option to just use ANSI Screen.
+ Update Menu Options, address configurable prompts so the screen layout or
  colors can be customized.
+ Added Extended Header Field const.
+ Laying out fields for Extended User Edit Display.
+ Completed initial User Display View. When making changes need to update the
  new m_users_list with changes, and also when changing to next or previous
  user until quit and save or exit without saving is selected.
+ Some User Editor Corrections, updated next/previous user to keep track of
  array index, this is shared with normal ALL view and filtered view, and gets
  re-populated on filtering. The next and previous with now move properly along the
  available users searched. Also incorrect selections will not redisplay the user
  listing again until a valid selection is made.
+ Updated Boolean prompts to just ask for T/F versus typing out True and also
  added header count showing current our of total records when switch between next
  and previous users in the list.  Next it assigning updated value to record,
  then saving or ignoring changes.

Change Log Update (00.00.117)
* 2018-07-27
+ Added move to next / previous user in field editor. Changed record load
  to use pre-loaded list of users order by handle, that will keep the search
  results and then Iterator through that when changing users.
+ Coding up the prompt displays on field commands.
+ Completed initial prompts for User Field editing on main view to .yaml file.
  Next is to create the prompts for the Extended Information View and finish
  coding up the field assignments.
+ Some minor Spell checking on files currently being worked on.

Change Log Update (00.00.116)
* 2018-07-26
+ Adding User List filtering for quick searches.
+ Added new user access flags to sting method to display all user flags as letters.
+ Added more User Fields, will probably add a second screen for extended options
  and keep it smaller and more optimized.
+ Fixed UnitTests for forms that rely on config class. Added new options
  and some indexes needed to be incremented.
+ Moved Output of std::time_t with printable date to a methods in common_io.
+ Some cleanup, started on User Extended Display.
+ Some more tweaks and updates, reworked birthday output fir display in user editor.

Change Log Update (00.00.115)
* 2018-07-26
+ Started on User Field Editor and displaying available options to edit. Also
  added new field to config file password_default_user, config file version has
  been incremented, the file must be updated manually, or the file removed and
  will auto re-  generate on startup of the program otherwise it will result in
  version mismatch and not startup.
+ Completed USER_ADD, USER_DELETE, USER_COPY with default renaming of user_name,
  handle and emails.

Change Log Update (00.00.114)
* 2018-07-25
+ Building Initial User Editor Prompts and Input State Methods
+ Setup to use RealName when Handle is not used or empty.
+ User List setup with (3) Rows with ID and Handles. If handle is blank,
  then use real name.

Change Log Update (00.00.113)
* 2018-07-23
+ Start on Mod User Editor.
+ Worked out kinks in paging display, if there are more menus or command module.

Change Log Update (00.00.112)
* 2018-07-21
+ Added Command View Display info Header, which gives information on toggling
  the views
+ Updated OSX project with latest changes.
+ Updated and Tested Linux Project. All good.
+ Added Generic Menu View in Menu Editor, users can now make changes and
  previews the screen before saving.
+ Added Change Options Prompt, was missing and using the menu change prompt
+ Tweaked the default prompt descriptions and some cleanup.
  Everything is testing good.
+ Completed command field assignments.
  also make next/previous command jumping hot keys, [ ] and ENTER is too annoying
  when cycling options and most likely legacy obv/2 did the same.
+ Added Option ID current / total in the display for when moving from/to next
  or previous option.
+ Added Option Fields and Prompts for Each field
+ Some slight refactoring for box drawing characters, Completed more state setup
  for Option Field editing.
+ Create Menu Option Editor for editing individual fields, Screen layout.

Change Log Update (00.00.111)
* 2018-07-20
+ Completed Option Move.
+ Completed Option Copy, and a little extra cleanup.
+ Completed Menu Option Delete.
+ Added Menu Option Create initial.
+ Some cleanup and also update black fields for Add/Change/Edit/Delete
  will return on empty input and also abort on ESC.
+ Menu is saving changes properly, change Quit to default Save and added
  Exit without saving while menu changes are stored in memory.
+ Finished adding menu fields, added |PD to display to field prompts
  which display the prompt description as help text when editing fields.
+ Updated Input to allow blacks and clearing fields out.
+ Various Prompt updates
+ Added checking when editing a menu to only reload if menu is not
  already loaded. Then on exit we now need to add save/abort question.
+ Some small tweaks and got initial input field formatted properly with
  leadoff data if Entry already exists it will populate it to edit or
  modify the existing.
+ Added Menu Parsing for Prompts in the modules, mainly with |OT pipes
  for general placeholders for in Editor headers for Menu Name and other data.

Change Log Update (00.00.110)
* 2018-07-19
+ Menu Field Edit now properly leads into editing Menu Options (Commands)
+ Initial Menu Field edit display is completed
+ Updated new Toggled Options Views to (3) Separate states
+ Some State Updates for the Menu to Options screens.
+ Adding Menu Option Display and Initial Editing functions and callbacks.

Change Log Update (00.00.109)
* 2018-07-18
+ Menu Editor, Fixed ordering of input Methods, Also added getLineInput for parsing
  keys. Ready to start building out method and pipe sequence parsing.
  Initial MenuEditor Option/Command display completed.
+ Updated Padding (Left/Right) when the string it empty, it will now padd properly.
+ Cleanup on some socket output for debugging Async processing.
+ Completed Copy Menu Source/Destination
+ MenuEditor, delete function is completed and tested.
+ Completed Menu Add Command, Creates a new default menu with a default
  menu command for starting out.
+ Updated Menu editor, added Copy, and changed "change" to "edit" for input keys.
+ Added initial input method for Add/Change/Delete and checking if the
  menu exists or not in the folder.
+ Added colors to menu list, need to add more baseColors for the mods for
  Theme default colors lateron.

Change Log Update (00.00.108)
* 2018-07-03
+ Corrected some login issues with rework, removed Enum no longer being used
  corrected the issue with the state.

Change Log Update (00.00.107)
* 2018-06-24
+ Started Initial Rework for Menu Editor

Change Log Update (00.00.106)
* 2018-06-24
+ Some cleanup after rewrite, updated all project files to the latest
+ Reworked UUID generation support when boost was removed to use new libraries.
+ Removed ARM folder. ARM was for older Pi's running raspberry on an outdated setups,
  the current Linux project builds and handles both x86 and ARM builds.
- Next work on sysop interfaces

Change Log Update (00.00.105)
* 2018-03-18
+ Large re-write removing Boost Libraries for core and unit tests
  Minor Boost items like system/file system are used in the menu and prompt
  converter programs for ease of use.
+ Ripped out Boost ASIO for Async Socket Communication, Timers, File System
  and Locale support.  This was a large rewrite to get things working on OSX better.
+ Replace ASIO with SDL2_Net library used in EtherTerm, This removes SSL socket support
  which wasn't used at the time, but also adding libssh in the process for SSH
  server connections to be hooked up at a later date.
+ Created an IO_Service to mimic ASIO to use SDL2_Net Sockets and connections in
  an asynchronous way to use the existing code base.
+ Created Deadline Timers for asynchronous waits with callbacks to mimic Boost's
  deadline timers to keep existing functionality.
+ Wrote some new directory methods that are cross-platform to replace the use
  of Boost File system.
+ Added UTF-CPP project to replace Boost Local for parsing and supporting utf-8
  character data and strings.  It's not as robust with translations but for now
  should handle input and parsing strings correctly.
+ Create an OSX Codelite program for building the system, tested on High Sierra.
+ Switched from Boost Regex to std Regex in c++11.
+ Fixed some issues with Regex expressions used when tested in clang vs gcc
  also added Regex Expression Exception catching.

Change Log Update (00.00.104)
* 2018-02-05
+ SqliteWrapped, update making file lib naming so if users run this manually
  from the command line it matches the cases the project and xrm-server expect.
  Also fixed for Jenkins build processing so it doesn't have to rename it.

Change Log Update (00.00.103)
* 2018-02-05
+ Corrected issues with Linux (ARM) Builder and G++7 Compiler in Arch Linux.
+ Hooked in Jenkins build processing, on-demand builds are setup now, next will
  hooking up commits and pull-requests.

Change Log Update (00.00.102)
* 2017-08-20
+ Updated Classes with explicit for empty and single variable constructors
+ Also added override keyword for all virtual class implementations
+ (Win32) added missing DAO classes for unit test linkage.

Change Log Update (00.00.101)
* 2017-06-18
+ Working on FormManager and ModSysConfig code. Initial code to parse
  ANSI template sizes and determined how many options will fit per page
  is done.  Now working on code to parse and display the Templates
  With the menu command / Form Options in lightbar format.

Change Log Update (00.00.100)
* 2017-06-07
+ Testing Arch Linux Port of ARM.  Found some issues with OpenSSL
  Version 1.01 has changed it's API.  Corrections are now added
  to detect and handle newer and older API Calls for SHA1
  Which can probably be removed later on also.. Was testing a fix
  for Enthral as well.
- Other issues with Arch for ARM is GCC version 7, lots of new
  and crazy warnings, needs to look into this.
- Note, the previous ARM setup was more for any Linux using GCC (Debian) Jessie
  with version 4.9 and lower.  the ARM folder will be renamed lateron for
  Compatibility of older distro's for now at least.
- Note, Codelite will build and compile on Arch ARM which has the latest
  libs and features.. One plus, other is that doc's suck and you have to
  keep recompiling and adding missing libs as you go for just about everything
  in Arch.. haha.

Change Log Update (00.00.99)
* 2017-05-28
+ Several Updates to compile and run on ARM platform - testing (Raspberry Pi2).
+ Updated Threads, downgraded std::thread to use pthread for Posix for gcc 4.9.1
  compatibility ARM.  GCC < 5.1 doesn't appear to work correctly, known issue.
+ Also changed from std::time methods for std::get_date and std::put_date, also
  not compatible with GCC < 5.1 for ARM compatibility.  Switched to Boost::Date_Time
+ Corrected Shutdown issues with menu logoff command trying to execute or cycle
  stacked commands once the sessions has closed. The system will not exit the menu
  command look when a logoff command is executed.
+ Fix for UTF-8 output encoding, optimized byte parsing, only noticeable on ARM.
+ Created a new ARM folder for standalone make file.
+ Added README in ARM folder with build instructions and notes.
+ Created Makefile xrm-unittest-arm in Unit Test Folder for building and running
  all unit tests.

Change Log Update (00.00.98)
* 2017-05-27
+ Bugfix Database Global Variable, new DBStartUp Class needs to set this
  and not use local variable.

Change Log Update (00.00.97)
* 2017-05-20
+ Create ModSysConfig to use new FormManager. Still work in progress to use
  multi-page forms
+ Created DBStartup class that will handle creating and check all tables
  moved out of main to keep it cleaner.
+ Added AccessLevelDao, with each level having it's own limits for users
  Still need to implement user login pulling limits from the access level assigned
+ LastCallers will use SessionStats for pulling last x successful logins
+ Cleanup DAO, removed unused includes.
+ Cleaned Up Grouping Model, don't mix file and message conferences.
+ Synced All Updates with Linux Platform.

Change Log Update (00.00.96)
* 2017-05-12
+ Completed Refactoring of All Dao object to now use the BaseDao for concurrency.
+ Created Dao Integration Tests for Initial DAO Refactors with mock databases
  and clean up.
+ Synced all Linux Project Files
- Eventually complete all Integration Tests.

Change Log Update (00.00.95)
* 2017-05-07
+ Create new BaseDao Object for Standard SQL Database base calls.
+ Updated ConferenceDao to inherit BaseDao
+ Updated OnelinerDao to inherit BaseDao
+ Created Integration UnitTests for Calling ConferenceDao testing all BaseDao
  Methods to make sure everything is solid.
+ Added new getAllRecordsCount() to baseDao
- Working on refactoring the remaining DAO objects to inherit from BaseDao

Change Log Update (00.00.94)
* 2017-05-05
+ Removed AccessLevel yaml file, this will be redone in Database with DAO
+ Added new Protocol yaml file for File Transfer Protocol Configuration

Change Log Update (00.00.93)
* 2017-05-05
+ Completed Network DAO (FidoNet and IP Network Address Mappings)
+ Completed Oneliners DAO
- Next:
- Look at last callers, pull from sessions stats, or make standalone table.
- Convert AccessLevel yaml to database table.

Change Log Update (00.00.92)
* 2017-05-04
+ Completed Grouping DAO (Groups Conferences and Message/File Areas)
+ Completed Message Area DAO
- Network DAO for Fido / IP Address for Message Areas and Networks

Change Log Update (00.00.91)
* 2017-05-04
+ Completed FileArea DAO
+ Added new model files for Conference Grouping
- Create more Dao objects for reading/writing the Models to database.

Change Log Update (00.00.90)
* 2017-05-03
+ Added new model files for File Areas, Message Areas, Network Addresses
  and BBS Listing.
- Create Dao objects for reading/writing the database for the new models.

Change Log Update (00.00.89)
* 2017-05-03
+ More work on the FormManager and System Configuration Form along with
  Implementation.  Still working on the best way to implement so playing
  with different ideas right now.
+ Create Conference Model, and DAO for database read/writes.
- Will be adding Message and File Area models and DAO's next.

Change Log Update (00.00.88)
* 2017-05-02
+ Updates to Process, Added Separate UpdateState for Process Handling
  If were inside a process, skip ESC sequence testing, just pass through
  all data as is to the process.
+ Cleanup processes on next look, make sure if a process is not running to
  pop it off the stack for cleanup.

Change Log Update (00.00.87)
* 2017-05-02
+ External Processes (Windows / Posix)
  Created Classes and methods for executing external processes, doors, scripts
  Tried Boost Process but didn't work as needed and ASIO calls were not working
  implemented initial platform specific processes execution.
- Need to implement screen buffer save / restore on return from external process
- Add Flags to clear the screen on external processes execution
- Add checks if user hangs up, process will also be terminated (testing needed)
- Look at implementing either Python or V8 Java Script engine for scripting.

Change Log Update (00.00.86)
* 2017-04-29
+ Windows Project Updates
  - Updated Boost from 55 to latest 64, compiled with ICU and Boost Python now.
  - Cleaned up all Project Files, removed unused libs and include folders.
  - Cleared new Boost Warning in Config.hpp model for Boost UUID generation.
+ Resynced Linux Projects
- Researching Door/Script Server Now for externals.

Change Log Update (00.00.85)
* 2017-04-17
+ Completed Initial work on SessionStats objects and Database DAO calls.
+ Added Startup creation of stats on connection.
+ Fixed minor compiler warnings left over on signed vs unsigned comparisons and
  Unused Database variables.
+ Synced Linux projects and Database checks on both platforms Windows and Linux.
+ Updated Users Records, removed fields not needed for individual users,
  and moved some fields to SessionStats which is better for tracking statistics.

Change Log Update (00.00.84)
* 2017-04-10
+ Completed more work on Unit Tests and Configuration Form
+ Remodeled some of the folder structure, split data and model into (2) sets app and sys
  Sys for Core System Data and Models, and App for Application Data and Models ie..
  LastCallers, OneLiners, etc..
+ Sync Linux workspaces and project with the new structure.  All Unit Tests are passing.
- Moving from Form Work right now to getting some applications data doing and logon sequence.
  Going to work on getting more Tables setup and Data Access Objects going now.

Change Log Update (00.00.83)
* 2017-04-08
+ Some slight refactoring to ACS String Validations, Call a single method instead of doing it manually
+ Started Unit Test for FormSystemConfiguration.  Unit Tests help test and map out the best way to
  write the dynamic menu form options.  Using YAML for serialization and mapping class fields.

Change Log Update (00.00.82)
* 2017-04-08
+ Added Menu Option ACS Level/Flag Checking, Any options not available are removed from display.
+ Added Menu ACS Level/Flag with Menu Pre-Load, if menu is not accessible, the user stays at the current.
  Some more testing on this is needed along with check if it should jump to fallback.

Change Log Update (00.00.81)
* 2017-04-07
+ Added iFilePoints to User Table and Model
+ Added iMessageLevel to User Table and Model
+ Config, changed kilobyte to megabyte for more modern limits and tracking.
+ Incremented config version also.
+ Re sync Linux Project with Latest Updates. Tested good.
+ Added pull from config file for starting menu once the user has been authorized.
+ Added check for User AutoValidation on Signup,  If so, the system will upgrade
  from unauthorized level 10 (new user), to 20 default level set in config file.
  Otherwise it should sit at level 10 until the sysop validates the user.
+ Added new AccessLevels Models and DAO for storing security levels with descriptions
  NOTE: Add Defaults for each level, instead of single set from config, each level
  can have it's own customized defaults.
- Next will be implementing Access and Security checks in menus and options to enforce the rules.
+ Setting up initial Configuration Form
- Testing Yaml for Class Reflection on Form Manager
- Updated Menu And Options to Hold Pass through Form Values still WIP

Change Log Update (00.00.80)
* 2017-03-31
+ Start on FormManager Code, Created first FormSystemConfiguration with FormBase class
  Further work will start on layout of building custom menu options, with input and yes/no bars
  For Configuration interfaces.

Change Log Update (00.00.79)
* 2017-03-30
+ Updated Menu Version to 1.0.1
  Change Menu and Option Groups to ACS_String
+ Complete Initial Access Condition System handling Security levels
  and (2) Control sets of AR flags with unit tests
+ Updated User Records and Database Schema for Control Flags, Should have been
  Integer for Bit values instead of a string
+ Fixed issue with Sysop menu and the pre gosysop menu that is suppose to ask
  for sysop password.  The prompt is not yet setup for input, bit the menu
  will no longer get stuck when trying to return to the starting menu
+ Fixed issue with menu prompts, when the menu was changing the system was
  executing the clean input (used for when menu command return without execution
  the system will clear the input text on the screen.  Added a check if the menu
  changes to no longer attempt to clear input text since everything is re-drawn
  this will no longer overwrite the menu prompt.
+ Tested Changes in Linux, Updated Linux project and refreshed build folder.
+ Fixed and updates were done for Theme Colors and Users Colors for Yes/No Bars
  Make sure to remove the xrm-config.yaml and users.sqlite3 database and let the
  system recreate and re-apply as a new user for correct colors on lightbars.

Change Log Update (00.00.78)
* 2017-03-15
+ Corrected Issues with YES/NO Lightbar padding on pipe and control color codes.
  The system now parses these to ANSI ESC Sequences prior to screen drawing
  so they are no longer pushed forward.
+ Also Added in user's theme colors for yes/no prompts.
+ Newuser signup now properly assigns the logged in user to the session.
+ Corrected Theme color being pull from config instead of signed on users record.
+ Newuser creation now sets user defaults pulling from default configuration colors.
+ Default colors are now pulled from configuration, and set to the initial instantiation
  of the user record using default system theme colors until the user logs in and the
  system takes over using the user's default theme colors.
+ Corrected final issue with stacked commands and menu changes.  If the menu changes
  while processing stacked commands, we need to then exist the loop gracefully and
  no longer attempt to execute or loop commands that no longer exist.

Change Log Update (00.00.77)
* 2017-03-12
+ Finished Initial Update for Single Lightbar Menu prompts.
+ Corrected some issues with Stacked Commands on these special case menus.
+ Removed CRLF after ENTER on lightbars menus is used, commands not executed
  should not push the screen and keep the same display.
+ Updated Login prompts, this mean the build folder will be updated and/or
  the login.yaml should be removed and regenerated with new defaults.
+ Corrected issues in AnsiProcessor with last line calculations.
  Updates last line used detection methods so the single line prompts
  will now display properly under the menu prompt.
- WIP have to look at the quit menu option or fallback in the sysop menu,
  Quit is not returning to the menu that called it.

Change Log Update (00.00.76)
* 2017-03-06 / 2017-03-09
+ Fixed Several Linux display issues due to lapse in testing in this environment
  once functionally was added.
+ Fixed Issues with Generic Menu Template Display, Top and Mid.  Some old DOS
  system save clear screens with just ESC2J so had to add a ESC[1;1H to move
  to cursor to the top of the screen.
+ Also Fix MID ansi issues where some telnet clients will wrap ESC[C right
  cursor pushes. However, the Linux terminal will wait at the end of the line
  until a displayable character is found.  This is not fixed to check in between
  spacing sequences for ANSI optimizations.
+ Also refactored and some code cleanup.  Some generic some was added and might
  be moved to the common libraries lateron if it's needed by future systems.
+ Tested and corrected issues with yaml message prompts.  Instead of letting
  YAML write the output which force converts to UTF-8. We now write out the
  yaml format manually when it comes to menu prompts.. All text prompts have %DF
  for displaying files and don't need too much high ASCII. However if the need arises,
  can work out some MCI codes where the file will write out yaml and MCI codes will
  be replaces with CP437 sequences.  Add to the TODO list!
+ Fixes For Bottom of Used Screen Detection, Thanks to Putty and 24 Lines
  Was able to test and fix a detection issue and now new prompts will
  properly show under the menu prompt on any screen length.
+ Created New MenuPromptConvert project for converting legacy Menu Prompt Data to
  individual .yaml files
+ Create Model and DAO's for new Menu Prompt Layouts and the new code is plugged in
  and working nicely
- Update MenuPrompt out of yaml to save as raw text to keep CP437 encoding. YAML
  forces UTF-8 output which will corrupt the CP437 characters saved.
+ Also added random menu prompts when no prompt is selected as an option.
+ Updated User Record / Database table, changing menu prompt from an int index to
  the name of the file for easier lookup and selection.

Change Log Update (00.00.75)
* 2017-02-06
+ Updated Build (Data Files) Archive which is linked on the Wiki.
  Fixed some display issues with default file menu settings, Some stacked
  commands should have been marked hidden.
+ Corrected Issues with Starting and Fallback menus, Now able to pass through
  From Message / Scan, and Quick Back to Main
  From File / Scan, and Quick Back to Main without issues.
+ Updated Menu Templates, no longer forcing a New line between mid and end screens
  The end template should add a CR is one is desired.
- Single line Bar Menu's are will a WIP.

Change Log Update (00.00.74)
* 2017-01-05
+ Quick Fix, on %%DF Filename display in text prompts.
+ Also added .ASC file load if .ANS is not found.

Change Log Update (00.00.73)
* 2017-01-04
+ mod prompts (Signup, Login, Pre-Login) setting up default prompt theme colors
  will also carry over to menu's to match system/user preference colors.
+ Added max screen rows used, so we can pull the lines drawn on the screen
  then display the prompt by default under the last items draw no matter where the cursor is.
+ Large refactoring of all Modules (Signup, Login, Pre-Login), go rid of some code smells
  and reorganized methods to have better naming to cut down on comments needed.
+ Reformatted all module text prompts to use default theme colors, pipe colors can stuff work
  but now everything is customizable by default on system color settings.  More on this to come.
+ Fixed lightbar drawing issues on pull down menu's.. most noticeable was the matrix menu.
- Mocked up the yes/no light bars, still a WIP
- Need to switch input to hotkey for N Menu functions.
- Started working on text prompt formatting for unformatted strings, default coloring for
  strings not using pipe colors to add some configurable default feel to the system
- Added |PD in text prompts, this will display the prompt description (XRM Special)
  Users can add extra notes or instructions in the description of the prompt and display it along
  with the text.
  
Change Log Update (00.00.72)
* 2016-12-21
+ Issues with Sysop menu corrected, it was actually a C++ issue looping vectors.
  Correct other container looks even through they weren't showing issues
  Better Safe then Sorry!  
+ Implemented more menu switching logic, for commands that change and skip execution
  of FIRSTCMD keys.
+ Started on Special Menu Action Prompts, menu's that display a special string with control
  characters and get prompt with lightbars yes/no, or other user input.  this will
  take some time to complete, as there is a lot of logic to all of the options.
+ Add masking for output on login password and the newuser passwords
+ Also started implementing theme color logic for prompt strings
  parsing the following control sequences for system or user selected colors.
  ^R - Regular Color      ^S - Status Color
  ^P - Prompt Color       ^E - Input Color
  ^V - Inverse Color      ^X - Box Color
  ^M - Goes down a line
- Main focus right now is on menu options and switching between menu and getting all
  custom logic going.

Change Log Update (00.00.71)
* 2016-12-19
+ Started Working -/ and -\ Menu Loading commands for switching menu's.
  Initial tests are working good.  Sysop menu didn't want to load but all
  others appear to be working properly.  Will look into the Sysop menu!
+ Corrected some overdraw issues from the screen buffer for MID ANSI's.
  '\0' Null characters or not plotted characters in the buffer were defaulting
  to spaces. When the MID ansi codes are drawn out these spaces would then over
  write the left and ride borders of the ANSI templates.  Instead i not loop
  and check for a sequence of \0 characters, then push out ESC[C to move
  the cursor forward instead of overwriting.  ANSI menu screens with templates
  are now displaying properly.
+ Menu Option Ordering, YAML does not guarantee that Sequences are loaded in the
  same order they are present in the file.  Updated the Menu DAO (Data Access Object)
  to now sort by the index field assigned to all menu options to keep the proper
  ordering.

Change Log Update (00.00.70)
* 2016-12-18
+ Started Shelling Menu Option Commands
  Started On Control Commands which handles allot of the core menu
  features like switching menu's, setting fallbacks, and displaying strings.
+ Incremented Config File Version to 1.0.1, added new fields
  for invalid_password_attempts, and invalid_newuser_password_attempts
  to avoid endless loops and when to kick out on invalid attempts.

Change Log Update (00.00.69)
* 2016-12-18
+ Re-synced Linux Workspace
+ Corrected and Updated Unit Tests for Field Input

Change Log Update (00.00.68)
* 2016-12-18
+ Completed Function Mapping for All Menu Command Functions.
  Used std::map to easily use a lookup by the first command key value.
  allot cleaner then a switch statement.

Change Log Update (00.00.67)
* 2016-12-17
+ Started Menu Commands Controls for Functions we need to build out
  Still a work in progress, might go with dynamic function array
  instead of long switch statements.  But that's just fancy
  and doesn't really do much.

Change Log Update (00.00.66)
* 2016-12-17
+ Added MCI Code parsing for Menu Prompt. Pulling the Menu Prompt
  Field for Menu Name, Added Time Left, and Time Now
  Which are not implemented since were not keeping track of time
  limits yet.
+ Also update previous field input length limits to match legacy
  |FL
* 2016-12-16
+ Some Menu System/Base Code Refactoring, Variable Name Cleanup
  Working to keep better design and naming principals

Change Log Update (00.00.65)
* 2016-12-14
+ Fixes for MID Ansi Template Processing, Now uses internal
  Ansi Processor for parsing implied ESC Sequences ESC[;20H
  where the missing sequence is considered the current row
  instead of default row 1.  We draw the screen internally
  then push out the processed screen for correct drawing.

Change Log Update (00.00.64)
* 2016-11-30
+ Menu Option Cleanup and split out to separate methods.
+ Split up Menu Input into Pull down and Standard Input
  Pull down Accepts Hotkey's, while Standard is line mode.
+ Added new code to handle stacked commands when using
  ENTER to make lightbar selection
+ Split Regex Expressions into constants that can be
  passed in to the Code Map for different screens.
  Makes it easier to setup different screens and their
  custom MCI code replacements per interface.
+ Completed Generic Menu Template processing.  When the
  Menu HelpId is empty, or no ansi exist the Generic
  Template is used for Top, Mid, and Bottom.  All
  valid Menu options are then populated. Drawing the
  Menu ANSI Screen. This is also used for the Menu
  Library's and Selectable Themes across the system.
+ Added some Missing Include for Boost Lexical Cast.
+ Corrected missed parsing on Pull down Menu Hotkey's.
- Initial Menu Prompts are pulling and are displayed.
  Need to add MCI parsing for data and position.
  Also need to debug the baseProcessAndDeliver for Menu screens.
- Also need to setup user selection for available menu prompts.

Change Log Update (00.00.63)
* 2016-11-29
+ Split Standard menu input, (InputField) with wildcards for menu commands
  And Lightbars.  For Instance Matrix (Lightbar) vs Main (Standard)
  Pull down menu are hot keys CTRL keys for movement and automatically
  Hotkey interpretation while normal menu are full line input
  with the ability to set T* then typing t, transfer and any test starting
  with T will execute the command.
+ Corrections to Database Layout, added COLLATE NOCASE for Handle, Name, and Email Fields
  Tested with standard and Unicode input.
- WIP generic menu templates top, mid, bottom.

Change Log Update (00.00.62)
* 2016-11-21
+ Added some initial config flag validation to catch any possible
  conflicts on manual configuration.
+ Sign_up and Login mods, move encryption out of class instance
  and just call it when used.
+ Complete Login sequence, Added user lookup by Id, Handle, RealName, and Email.
+ Turned off User Index on Table, can't have unique if values are turned off
  fe.. Handle, RealName, Email, if any of these are not used they are blank,
  and blank can't be unique.
+ Add check for disconnect on invalid attempts. Also add to config file.
+ Added STDIO error output for database for debugging, attached &m_database_log
  in session data.

+ Corrections on queries, added c_str() to table name variables, was missed.
- WIP, Successful login marks authorized, then moves to main menu.
  Also need to add invalid attempt, kick back to matrix or logoff.

Change Log Update (00.00.61)
* 2016-11-20
+ MenuBase has been converted over to using the new .yaml menu files.
  Only tested matrix.yaml at the moment, still more code need to be added
  for jumping to other menus, and then implementing menu features to come.
+ Update getProgramPath to pass executable name.  So multiple utilities
  sharing the same object will have the correct filename removed from the
  program's path.
+ Added Corrections to #include Boost File_System for Scoped ENUM
+ Linux Project Re sync update for new virtual folder with testing.

Change Log Update (00.00.60)
* 2016-11-18
+ Finished Legacy .MNU to new .YAML menu file conversion utility
+ Also made some correction to the legacy menu loading code.
+ Next step is to replace the menu loading code to use the new yaml files.
+ Some minor changes to the menu option names in the yaml file.
+ Updated unit tests for new config file version, included needed dao file.
+ Added check if and exit if no legacy .MNU files exist to display a message and exit
+ Added Fix in Telnet_Decoder for NAWS, add a proper casting for int conversion.

Change Log Update (00.00.59)
* 2016-11-16
+ Added File Versions to all YAML configuration files
  Config, Menus, Text Prompts
+ Current Asserts on Version ms-matches, need to eventually work out
  a cleaner shutdown process.

Change Log Update (00.00.58)
* 2016-11-16
+ Rename Legacy Menu objects with Compat
+ Create New Data Access Object (DAO) and classes for
  reading/writing menu's in YAML files.
+ Starting on Legacy to new YAML XRM Menu format then plan
  to update the loading code to start using the new menu files.
+ Also added File Versions to all YAML configuration files.

Change Log Update (00.00.57)
* 2016-11-15
+ Add new MenuDao and Menu class for YAML menu files.  Rename previous to compat to
  Mark data for the original obv/2 data sets.
+ Started Menu converter to convert legacy menus to new YAML files so we can extend
  Menus in a new format and add new features.

Change Log Update (00.00.56)
* 2016-11-10
+ Refactored Menu System, decoupled and split core from the state
  into a base class. This allows other dynamic systems to use it's
  features for lightbars with callback command execution specific
  to each interface.

Change Log Update (00.00.55)
* 2016-11-08
+ Added New config variables to Config_DAO for read/write to yaml file.
+ Added session disconnect to matrix G command to test logoff.

Change Log Update (00.00.54)
* 2016-11-06
+ Added more use flag fields to the config file for new user prompts.

Change Log Update (00.00.53)
* 2016-11-05
+ Added some more regexp field validation expressions (unit tests needed)
+ Added regexp validation messages, for descriptions on field requirements.

* 2016-11-04
+ Some cppcheck issues fixed

Change Log Update (00.00.52)
* 2016-11-03
+ Create new unit tests for SessionIO testing main MCI Regex sequence parsing.
  Completed tests for all (7) groups of codes.

Change Log Update (00.00.51)
* 2016-11-02
+ Minor Updates to menu system
+ Refactored regexp for pipe2ansi, also broke out code_map and parsing
  to more easily unit test results from regexp.
+ Updated unit tests for previous code changes.
- WIP add new unit tests for code mapping

Change Log Update (00.00.50)
* 2016-11-01
+ Create Linux Workspace and project files
+ Fixes issues with Linux terminal closing causing exceptions in io_service
  Now the io_service loops and reload any disconnects which doesn't cause
  issues to other connections and threads.
+ Added flag for global shutdown on the commutation to let the thread loop
  know when the io_service is ready to be shutdown for good.

* 2016-10-15
+ SessionIO::pipe2ansi, added new custom screen MCI translations lookup/replacements
  On custom screen we need to ability to compile of a list of MCI codes specific
  to an interface, then when the ansi is parsed it quickly process these interface
  specific codes.

Change Log Update (00.00.49)
* 2016-10-11
+ Updated workspace, moved project files to separate win32 folder, Linux and BSD etc..
  will each have their own project folder for building the application to keep things
  cleaner.

Change Log Update (00.00.48)
* 2016-09-20
+ More work on Sign-up and saving user data.
+ Narrowed down saving Birth date and Call Dates to the database in UTC Unix epoch.
+ Need to test some on applying different times differences.  Local time works good
  Good for system, but each user will select and have their own local time represented.
+ Also added Invalid Email prompt when the email entered already exists.

Change Log Update (00.00.47)
* 2016-09-17
+ Worked more on the sign-up process,  Now saving user record and security record
  to the Sqlite database.  Still need a little work on the dates and best way
  to store and retrieve UTC date and times.
+ Also cleaned up the mod_signup code some and optimized the displayPrompts

Change Log Update (00.00.46)
* 2016-09-04
+ More work on the signup process.  Most of the questions are all set.
  Still small things for validation, some stuff for detection needed for backspace
  and then the final verify and save.  After that can start on the logon process.

Change Log Update (00.00.45)
* 2016-08-22
+ Added Several Updates and Fixes for Linux/OSX Terminals
+ Corrected Telnet Options for Echoing back and removing line mode
+ Removed check for duplicate options, so we can call more then one
  and expect just as many replies without endless loops.  Tested Good.
+ Added Clear Screen and home cursor for initial screen positions to match
  the local screen buffer.
+ For ansi screens in windows, replaced \n with \r\n on parsing ansi files.
  (Should also add detection if just \r or replace with \r\n also.
+ WIP need to add screen size change detection, if the screen size changes
  we need to redraw the screen but also resize the local screen buffer to match
  so lightbar are still in the correct positions!  Important, but not vital just yet.

Change Log Update (00.00.44)
* 2016-08-21
+ Moved regexp fields expressions to the config file.
  Plan is to allow custom expressions for fields like handles and passwords etc..
+ Completed a few more new user app questions things.
+ Added Challenge Question/Answers to the Security Table for lost password
  If users don't like waiting on emails, etc, then can be ask a secondary question
  to reset their password. (Should we have multiple questions)?  One good for now.

Change Log Update (00.00.43)
* 2016-08-21
+ Created Security Table, Model and Dao for storing password and salt hashes
  per user.  This will have a foreign key linked to the user record.
+ Setup the tables in main and tested the dao
+ More updates to the signup process, added date validation
+ Plugged in the encryption hashing for passwords
+ Also Added ESC Sequences for proper CP437 to UTF-8 selection for Terminal Support

Change Log Update (00.00.42)
* 2016-08-19
+ Added Enum to config for standard field lengths for limiting field input
  by the same length through the program without having to hard code in each area.
+ Reworked AnsiProcessor to smart pointer and passes to all modules.  This keeps
  track of all screen data output so we know locally where the screen's x/y position
  is.  This is important for advanced screen redraws and MCI code parsing of positions
  on the fly.
+ Completed more work and refining on the new user application
+ Added in initial user database setup on startup and setup for creating new users
  in the sign up process.
+ Signup process is still a WIP.
+ Also plugged in the ansi processor to the modules, all output should be sent through
  the local screen buffer to we can pick up MCI codes on screens at any point in the scroll
  This allows dynamic lightbar on any screen without hard coding specific positions!

Change Log Update (00.00.41)
* 2016-08-11
+ Reworked inputField to handle pass through data properly.
+ Reworked so Backspace, Del, and ESC Sequences are not echoed back
+ WIP New User Application

Change Log Update (00.00.40)
* 2016-04-16
+ Updated from PKCS5_PBKDF2 SHA1 to SHA512 for stronger encryption.
+ Also added SHA1 for Salt hashing.

Change Log Update (00.00.39)
* 2016-04-14
+ Added both Initial SHA1 and PKCS5_PBKDF2 password encryption routines
+ Some more testing needed on c++ conversions of hex values.

Change Log Update (00.00.38)
* 2016-04-10
+ Update the ConfigDao object to update the smart pointer when loading the config file
  Modules now have access to the loaded values, might be able to switch this to copy/move
  constructor lateron, but looks good for now.
+ Added use_newuser_password and use_disclaimer to the config files for signup items.
  If they are enabled, they will be displayed and use in the signup process.
+ Update the menu system on command execution via ENTER and Hotkey to now execute the
  command match the command key sequence.  The matrix menu is the test bed, and is now
  kicking off the new user application when hitting A or ENTER on Apply for new.
+ Still working on the input handling for all of the signup fields now.

Change Log Update (00.00.37)
* 2016-04-06
+ Updated Modules.  Main will check and create a fresh config file if it doesn't exist.
  The config file is loaded one the menu system starts and is now passed through
  to each module for access.
+ Reordered the Detection phases.  Terminal options are detected, however they are now displayed
  after the Emulation is detected.
+ Work can now start on the New User Signup.

Change Log Update (00.00.36)
* 2016-04-05
+ Converted the Configuration to from Boost XML serialization to YAML
  Updated both the config.hpp and config_dao objects

Change Log Update (00.00.35)
* 2016-03-31
+ Added more code in SessionIO to check if ANSI emulations is not enabled, then
  Ignore PIPE color codes in prompts and pipe2ansi replace methods.
+ Started working on Signup Module for New User Applications
  Finished a lot of the initial method stubs and virtual functions
  Working on prompts on key/value descriptions
  Added check for Disclaimer and new user password.
- Next will also rewrite the system configuration from serialized xml to .yaml
  to make manual configuration and testing much easier.

Change Log Update (00.00.34)
* 2016-03-30
+ If ANSI is not detected, and ASCII NO Color is selected, .ASC screens are then
  loaded instead of .ANS and menu pull down lightbars are disabled for normal menu
  keys.

Change Log Update (00.00.33)
* 2016-03-28
+ Completed most of the stub for Logon Module for Login and Password Sequences
  Database lookup for user and password must be completed.  However, the signup
  and accounts needs to be created first for test.
+ Create Module Signup, initial stubbing completed for new user application.
- Also setup Session_Data->Emulation for ANSI or ASCII no color.
  Have to work out the stubs for removing all pipe color codes from prompts when
  in ASCII mode instead of having separate prompts.  Same with ANSI screens .ASC instead of .ANS
  default will be generic menus.  Test with Matrix first.

Change Log Update (00.00.32)
* 2016-03-27
+ Completed Use Codepage selections in PreLogon Module.
+ PreLogon module is now completed with initial detection phases.
  Moving on to the Logon Module for the Matrix login, and NewUser Module
  for new user accounts.
+ Adding CR\LF replacement to LF on incoming data.  Windows Console Telnet
  Likes to send CR\LF for [ENTER] instead of a single key.

Change Log Update (00.00.31)
* 2016-03-27
+ Working on more of the PreLogon process, When ANSI is not detected it will
  ask to use colors or ASCII no color.  Next need to work on codepage output
  CP437 or UTF-8.
- Also look at the NEW_ENV Telnet options when I get some more time.

Change Log Update (00.00.30)
* 2016-03-27
+ Worked out NEW_ENV Telnet options were locking up Windows Console Telnet.
  For now I've commented this out to look into at a later date.

Change Log Update (00.00.29)
* 2016-03-26
+ Prompts are not working for Terminal Detection (Telnet Option Parsing)
  When completed, now displays detected terminal 'ansi' and size '80x25' etc..
+ Prelogon Emulation Detection is working, sending ESC[6n and getting a response
  from the client,  ESC[xx;xxR for current X/Y Position showing the client
  can use ESC sequence
+ Also added a new Detection Timer for 1.5 seconds to receive client response
  for ESC[6n query.
+ Prompts are now setup to show Emulation Detected results
- Left off on asking for ANSI Color when detection fails
- Left off on asking Encoding CP437 or UTF-8

Change Log Update (00.00.28)
* 2016-03-25
+ Created New Mod_PreLogon to handle pre-logon sequences like Emulation and Term Detection.
+ Reworking the Setup / Input methods per the modules right now.
+ Moved the Initial Global Text Prompts out of Communicator to the PreLogon Modules to where
  they will be used.
+ Added parseFilename to session_io to handle text prompts with %%FILENAME.EXT MCI code
  This will parse and loaded the file name given in a prompt and display a file in the
  prompt string.
+ Communicator added Telnet Option detection global prompts.  So show when the client/server
  are communicates on options negotiation.
+ Removed new user functions from the Login Module, I'll create a new user module later next.
+ Removed SystemState, this wasn't being used as the MenuSystem is now called as the main state,
  More status will be added lateron for other "Services" once the main system is completed
  or further along.

Change Log Update (00.00.27)
* 2016-03-24
+ Update to main, moved path setup before the communicator is called so it has valid paths for
  creating / reading global text prompts.
+ Updated session: added a deadline detection timer for Telnet negotiations.
  on connection the session should wait at least 1.5 seconds before starting the state
  so that any terminal detection can be negotiated and detected before starting the login process.
+ Also updated the state, if were in the detection phase, and the state is not yet created
  then any input received is put on hold until the state is ready.

Change Log Update (00.00.26)
* 2016-03-24
+ Created global prompt that are shared system wide, they are accessed via the communicator object
  for easy of use and access, global prompt keys are created in the data/structures file
  while each module with have it's specific in their own mod_xxx.hpp file.

Change Log Update (00.00.25)
* 2016-03-24
+ mod_logon now has the initial read/write of module specific text prompts
  basic setup will check on creation of class if file exists, if not it will create
  with defaults.  The Module will load each prompt file on startup so to minimize disk i/o
  when grabbing different prompts throughout the lifetime of the object.
- Should create a global text prompt handler as well.  Things like Pause, or hit a key
  and other misc text prompts should not be duplicated across modules.
  
Change Log Update (00.00.24)
* 2016-03-24
+ Created new text_prompt_dao to handle reading and writing prompts for all modules
+ Each module with have it's own short and simple prompt file, this is a general
  template to handle all modules

Change Log Update (00.00.23)
* 2016-03-23
+ Realigned the state code files to standard naming convention

Change Log Update (00.00.22)
* 2016-03-23
+ Renamed Broad_Caster to Session_Manager to better describe what it does.
+ Various cleanup and re-organization.
+ Also removed directory_bbs from config, the main root folder will always
  be detected from where the executable is launched.

Change Log Update (00.00.21)
* 2016-03-23
+ Moved OBV/2 DAO's to compat sub folder to separate data access to original OBV/2 data files vs
  the current new data access objects.
+ These functions will be used later on for writing conversions.

Change Log Update (00.00.20)
* 2016-03-23
+ Created new Model sub folder to separate structures from data access objects.
+ Updated all files to the new model path
+ Added NewUserApplication stub for ModLogin
+ Currently building out text prompt reading, Initial idea is to have single function in dao.
  Then each mod will have it's own separate file of prompts which it will pass to the dao
  to quick read module specific text prompts.

Change Log Update (00.00.19)
* 2016-03-21
+ Rename MenuManager to StateManager to reflect what it does.
+ Removed unused or old files
+ Working on Logon Module for initial login process, also testing yaml for login prompts.

Change Log Update (00.00.18)
* 2016-03-18
+ Remove Initial Stub for Language File
  Change this to Prompts_Dao, Moved to Data Folder, working on reading the OBV/2
  Language file for prompts so I can convert this to an easier format to work
  With, later on will write an update for existing prompts.

Change Log Update (00.00.17)
* 2016-03-17
+ Added popping modules off stack when menu system is closed down!
+ Added new shutdown state cleaning in the Session Destructor to make sure the
  Menu System and all active modules are shutdown per RAII properly.
+ Update Module Login to pass Instantiate SessionIO class for handle key input

Change Log Update (00.00.16)
* 2016-03-17
+ Created new Mods Sub folder to store system modules
  All modules will be containers of system functions like mod_login for login procedures
  mod_messages for message, mod_files for files, mod_bbslist etc..
  Each module will contain it's own asynchronous input processing and output
  And everything will pass through from Session->MenuSystem->Modules
+ Bit of rework on the Menu System, changes passing character_buffer and bools to const references.
+ Added new startupModuleLogon() and moduleInput() for dynamic and asynchronous processing.

Change Log Update (00.00.15)
* 2016-03-16
+ Moved Menu and Structures to Data Folder
+ Rename MenuData to MenuDao for Data Access Object.
+ Working out how the login process will work from the menu system
- Also need to determine layout for language files, multiple languages / themes.

Change Log Update (00.00.14)
* 2016-03-16
+ Reworking the Menu System and Ironing out the functionality
+ Created executeMenuOptions() to handle processing command keys from input.
+ Setting processMenuOptions() to taken input and pass to execute
- Working default startup to check configuration for Matrix or normal logon.
  Then setting up the startup menu properly.
- Building initial login with apply as new first
- Looking at best way to handle language file for prompts, thinking key value map
  is much better then int indexes, don't have to worry about order ever!

Change Log Update (00.00.13)
* 2016-03-15
+ Cleaned up some Menu System Items
+ Need to add startup to matrix, and test for configuration value if it's enabled.
+ Start building out matrix menu, and new user application next!

Change Log Update (00.00.12)
* 2016-03-13
+ Config file will auto generate with defaults if it doesn't exist.
+ Using new Config Class and DAO to read config file. Remove references to Config.BBS
  which wasn't being used.
+ Telnet and SSL Sockets listeners are now swapped depending on configuration settings.
* 2016-03-14
+ Reworked the Configuration a bit more, removed passing configurations though the servers to the sessions
  This could cause sessions to stick with smart pointers, instead worked it into the Global Communicator
  Which will pass back a weak pointer of the config anytime it's needed since it's global and static.
+ Also added mutex and lock guards to the configuration.

Change Log Update (00.00.11)
* 2016-03-13 Long Break is Over
+ Started laying out Database Tables, decided to stick with custom version of SqliteWrapped.
* SqliteWrapped:
+ Makes lots of updates and have been rewriting SqliteWrapped to work a little
  easer with classes and help make some ORM related adjustments for pulling data
  in and out of classes easier.
+ Added transactional inserts, updates, and creates, failures can no be rolled back
  and makes for quicker inserts of large data sets, and also creating tables and indexes together.
* XRM:
+ Created a new Data Sub folder and initial data classes for Config and Users.
  Also created Config_Dao, and Users_Dao which will maintain the API for reading and writing data.
+ Config file is setup as a serialization class that will read and write to an XML file.
+ Users is setup to use the custom SQLite Wrappers API and updated features and methods.
- Work has been a little start as my time is still limited.  I have to rip out allot of the
  flat file stuff I did and start writing interfaces for the data, then later on write conversions
  from the flat files to the new data layouts.
- Then i also need to decide what format the menu files will be in.  It's kind of silly to use a
  database for menu files. So either XML, JSON, or something that is quick and easy to edit and use.

Change Log Update (00.00.10)
+ Note, SSL ipv6, and Telnet Options.

* 2015-11-05 Import to Sqlite
+ Starting on Initial Functions for Import.
- Started on Menu while also look through and testing Sqlitewrapped.
  Need to do some testing on writing and retrieving Dates from
  The Database.

* 2015-11-01 Obv2 Data Files
+ Breaking out functions for reading original obv/2 data files
  to a new update2xrm sub folder.  This is will be used for
  upgrading legacy obv2 systems to the new xrm format once
  it's completed.  Namespaecs will be created for different
  obv/2 versions as needed.  Default is 2.30, plans for adding
  2.4 etc for Black Flag and more.

* 2015-10-26 Sqlite3 Schema.
+ Worked on more tables and splitting out sections.
+ Working on some database inserts and performance testing.
- Goal is squeeze out the best layout that will run optimally on Pi/2 ARM
  and be well optimized for all platforms there after.

* 2015-10-22 Sqlite3 Schema.
+ Currently Breaking down the User And System Records into Tables
  Pretty tedious but need to normalized it out.


Change Log Update (00.00.09)
* 2015-10-19 XRM-WFC and SSL Connections
+ Large rework on the Session, SessionData and Connection objects
  Worked new SSL connections into exiting Session and SessionData
  Classes over the same pipes normal sessions.
+ Connections are now Stable over both TCP and SSL at the same time
  after combining sessions.
- Some more SSL client testing.
- Linux Makefiles are out of date with new files, and includes
  These Makefiles will need to be remade as time permits.

* 2015-10-17 SQL ORM Research
+ Looking into several different sqlite3 wrappers for some ORM
  or Object Relational Mapping.  After hours of compiling and
  some initial testing I'm decide to use the current SqliteWrapped
  wrapper which gives full query control. SOCI I checked out more and

  seemed to have several issues when working with classes and exceptions
  which killed the program every time.

* 2015-10-16 XRM-WFC and SSL Connections
+ SSL Connections are now working correctly with signed cert's.
+ XRM-WFC client is able to send and receive messages from the
  BBS server over SSL. And will have both a server and client.
  Sysop's will be able to connect up and join a global sysop
  chat, link systems, transfer mail over secure connections.
  That is the idea, still more to come!
- Still in initial test stages, needs quite a bit more refinement.
  Also look at Database ORM's SOCI is looking pretty nice and is
  under the boost licence as well.

* 2015-10-15 Added SSL Secure System to System Connections.
+ Started Oblivion/2 XRM Client_SSL Test will merge into the
  Waiting for Caller remote admin Interface.
  - This is for local system configuration, viewing users only,
    Internal Sysop messaging network possibly a lot more.

Change Log Update (00.00.08)
* 2015-10-12 Unit Tests & Code Refactoring.
+ Completed 17 more unit tests for a total of 80 passing.
+ Continue to refine IO classes to make sure all input is processed correct
  This is for both standard CP437 and UTF-8.

Change Log Update (00.00.07)
* 2015-10-11 Unit Tests & Code Refactoring.
+ Working on next method for SessionIO, Added start of
  ScreenBuffer testing for AnsiProcessor.
+ 63 Unit Tests so far. Only had a little time tonight
+ Various updates to Session and CommonIO

Change Log Update (00.00.06)
* 2015-10-09 Unit Tests & Start ARM Makefiles
+ Updates some Test Names, and Started UnitTests for AnsiProcessor.
+ Testing and working on ARM Makefiles for Pi/2 in Raspbian.
  More preliminary researching on what needs to be done.
- Small issues with outdated packages, Sqlite3 is 3.7.13, and
  we need at least 3.7.14 for sqlite3_close_v2 UTF8 version.
  This is from 2012,  a little outdated Debian, I think so!
- gcc also needs to be at least 4.8.x for c++11 support.
  default is like 4.6 maybe 4.7.  I upgraded this a long time ago.
- Will eventually put together some apt-get install command lines
  that will pull all required dependency packages for quick builds.
  However, ARM builds will take some manual updating. :)

Change Log Update (00.00.05)
* 2015-10-09 Unit Tests
+ Started Units Test on SessionIO
- Class only 10% covered so far. more to go.
+ Tested 52 passing unit tests in Win and Linux so far.
+ Various tweaks while working unit tests.

Change Log Update (00.00.04)
* 2015-10-09 Unit Tests and Linux Makefiles
+ Updated support and dependencies for Unit Testing.
+ Converted and updated 34 Unit tests for CommonIO.
- Next is to add NEW tests for SessionIO and MenuIO.
+ Updates Linux Makefile(s) for unit tests.  Also removed any
  static paths that were generated from the project.
+ Added missing <stdint.h> in Common_io.hpp.
+ Make sure all unit test cross compile on Linux as well.

Change Log Update (00.00.03)
* 2015-10-08 Code Cleanup.
+ Cleaned up some comments and fixed any left over tab spacing.

Change Log Update (00.00.02)
* 2015-10-08 Added Makefiles for Linux.
+ Ported To Linux for cross compiler testing.
+ Create new Makefile(s) for Linux builds
  - make -f Makefile-linux will build all (3) projects in order.
     - SqliteWrapped, xrm-server, xrm-unittests
  - Requires Boost, Pthreads, Sqlite3 libs.  Tested in Ubuntu/Mint
  - Moved compiler flags down from 14 to 11 standards.
+ Made small updates via compiling in Linux to code.

Change Log Update (00.00.01)
* 2015-10-08 UnitTests
+ Commented out Tests already pre-written.  I need to go through
  and update all tests to the current layout.

Change Log Update (00.00.00)
* 2015-10-08 Cleanup and Git.
* Moved all Source files to src sub folder.
+ Cleaned up files no longer part of the project.
+ Renamed project files from test to something more descriptive.
+ Added in Unit test++ to start creating and using unit tests.
+ Checked in initial version to GIT. Github will come once more of the base
  is completed.
+ Marking change logs with versions to match GIT
+ Some Cleanup and code break out of the MenuSystem.  Built extension files
  to separate specific menu operations.
- Starting on LanguageFile imports and string editor for all configurable
  prompts.

Change Log Update
* 2015-10-07 MenuSystem WIP
+ Initial Light bar display and movement, and selection are all working
+ Menu handling now working for FIRSTCMD and EVERY on menu
  returns.
+ Split out Menu DataFile Templates for obv/2 data files to new
  MenuData Class.  MenuSystem is growing as the core and need to keep
  everything organized.
+ Each Menu Loaded will have a fresh AnsiProcessor instance.
  This instance keeps track of all pull-down / template screen for
  parsing special MCI function codes by parsing and building an std::map
  to make a Key Value store of each screen pixel position, pixel in this
  context in a single character on the screen with color, attribute and
  position data.

- NOTES: Right now up and left move to previous, and down and right
  move to next light bar.  OBV/2 has overwrite for left and right so assign
  with menu commands.. so you can have up and down, or left and right
  toggle bars.. or split out to other menu commands.  Need to add this in.
- Need to Add menu command for override of starting pull-down ID.
- Add Cursor Toggle to hide the cursor when displaying light bars
  And/Or move to Menu Prompt location.  Also pull in selected menu
  prompt if available.

Change Log Update
* 2015-10-06 MenuSystem
+ Building the light bar menu processing for handling input and hotkey's
  menu items.  Stacked command triggers.  ENTER on light bar selections
  and arrow key movements with HOME and END to jump beginning/end
  of command options.
+ Completed methods for Menu Screen redraws without re-processing.
  Clear screen, Draw out initial light bars. Method of redrawing
  light bar movement updates.
+ Started handling of FIRSTCMD and EACH command keys for executing
  menu commands the first time menu loads, or EACH TIME a command
  completes and returns back to the menu.

* Items on the next Todo list:
-------------------------------------
- Still a lot more menu system work.  Handling normal menus without
  pull- down and field input.
- Access Control Systems with security levels and flags.
- handling menu prompts defaults and sets.
- handling menu themes defaults and sets.

Change Log Update
* 2015-10-05 Code Cleanup and Refactoring
+ Cleaning up some initial dev code for AnsiProcessor and ScreenBuffer.

Change Log Update
* 2015-10-05 Internal Screen Buffer - WIP
+ Completed screen buffer parsing.  Now have X/Y Coords and Colors of
  Special MCI sequences for Light bars in menu screen
+ System is now processing the MATRIX Menu for pull down commands
  then parsing the ANSI for the X/Y Coords and colors of each
  light bar state.  on/off.
- Can layout the low-light bars and active for the high-light bar.
  Need to add a looping to change back and forth between commands
  then setup command execution and processing.
- Verify OBV/2 light bar ordering.  Does is height by order in menu options
  or does it order by pulldownID index.  My bet is on the first one.

Change Log Update
* 2015-10-04 Internal ANSI Parser - WIP
+ Screen buffer is processing menu ANSI now. With redraw of screen
  from the buffer.
- Working on parsing character buffer for light bar position for cycling them
  in a menu.

Change Log Update
* 2015-09-29 Internal ANSI Parser - WIP
+ Reworking to maintain internal x/y Coords and colors attributes
  of the users screen. Rewriting the color ESC sequence parsing.
- Finished Color and Attribute Tracking. Implementing Clear Screen,
  (3) Ways, Entire, from cursor and above, from cursor and below.
  Then adding in Erase from Cursor to End of Line, From Cursor to begging.
- Add in pre-search in Pipe2Ansi for MCI codes so we know when to pull
  color and position attributes from the screen buffer.


Change Log Update
* 2015-09-28 StateSystem & Internal ANSI Parser
+ Reconfigured the Session->StateMachine->State->MenuSystem hierarchy.
  Cleaned up to Session->MenuManager->MenuSystem
  The MenuSystem is a now a State itself which easily inherits the
  SessionData Class when created through MenuManager.  This keeps it
  nice and clean without circular dependencies tripping up.
+ a Modified StateSystem will now be used from the MenuSystem
  When calling out to other interfaces that need to be instantiated
  and kept alive once the system returns for the next async_input loop.
- Started on Internal ANSI screen buffer.  This is needed to process
  all ANSI screens for special MCI position codes which tell the system
  where and what colors to place lightbars or input boundaries for
  split screen chat.

Change Log Update
* 2015-09-27 Menu System
+ Completed new Dynamic function mapping for the menu system.
  Each menu function will have (2) functions to work asynchronously.
  a startup...() method for each system will be used to switch over the
  input index to the selected system and also handle any initial setup
  and screen displays for that specific interface. While state->update()
  method passing input to the menu system will do a lookup and pass
  all incoming data for processing to the specific method awaiting input.

+ Tested switching back and forth between the default menu input and menu
  editor input without any issues.  Fast and smooth!
- Now that the base of the menu system is laid out. Work is starting on the
  actual interfaces for both the default menu, and menu editor.

Change Log Update
* 2015-09-25 MCI Codes
+ New Parser is up to speed with the old one parsing all menu prompt
  Codes for movement and colors along with ClearScreen and NewLines.

Change Log Update
* 2015-09-24 IPv6 and IPv4
+ Server will now listens and accepts both IPv6 and IPv4 connections.
  If the system doesn't support IPv6, it will default to an IPv4 listener only.

Change Log Update
* 2015-09-23 MCI Codes Parsing and Regex
+ Completed the initial parsing of MCI Codes with new Regex Parser
  Thanks Bryan for the extra help and cool validator site!
+ Added Enum system to the MCI Codes parser, some interfaces and
  screens have different MCI Codes, for examples menu prompts,
  status screen, upload checked. This will parsed for specific codes
  per interface.
+ Broke out parsing for PipesColors to separate function.
- Finished Parsing Pipe Colors.
- Parser is still a WIP at this time will finish up the general codes
  for colors and positions to move back to building the Editors.
- Regex parser is also important for ACS Levels and Flags once the menu
  system is going.

Change Log Update
* 2015-09-22 Communicator
+ Adding System wide configuration Structs to the singleton.
  This is for global configuration variable access to all sessions.
+ Moved PascalToCString, CStringToPascal, BoolToString to CommonIO.
+ Added Functions to Communicator to read the CONFIG.BBS record.
+ Started Exit Error Codes, First is if the Config file can not be loaded.
+ Completed import for Config record with updates from Pascal to
   C-Strings.
+ Changed MenuIO to SessionIO as it's more generalized for all interfaces.
   With Pipe2Ansi, and MCI Code Parsing and GetKey, GetInputField ...
TODO Notes:
- Break out MenuEditor to new Object from MenuSystem
  + Break out Read/Write Functions to MenuIO
- Break out ConfigEditor to new Object from Communicator
  + Break out Read/Write Functions to ConfigIO
Making these Objects callable from the MenuSystem itself.

Change Log Update
* 2015-09-21 MenuIO.
+ Created New MenuIO object with SessionData
+ Added High Level GetKey, GetInputField,
  CreateInputField: generates ANSI background color at specified length
  for Inputting data for specific amount of characters.
  pipe2ansi for MCI and Pipes sequence parser.
  ANSI foreground and background colors method for pipe2ansi.
+ Input Fields will have override for Foreground/Background colors with
  MCI codes along with Field Length.
+ Some minor code refactoring to keep naming the same across the
  board
+ Ran CppCheck to clean up any thing missed and unused variables.

- Looking at the best way to handle function calls in the menu system
  Looking at a map of function pointers to dynamically shift
  what methods receive input and to shift what is active.
- Also looking into Output Deadline timer for timing out of delayed ANSI
  Screen.  This will include long scrollers and Ansimation.
  Might need to add this to a separate thread so other nodes are not
  delayed as well as the node displaying the ANSI on a timer.

Change Log Update
* 2015-09-21 SessionData Object and Core IO Working.
+ All Core IO and Deadline timer session objects are now in SessionData.
  SessionData is now working nicely being passed through the states.
  Clean shutdown of the system through the Singleton to loop each session
  and disconnect all connections properly is completed for maint shutdowns.
+ Getline/Field Input is done.  Add a Hotkey toggle with easy to use functions
  for handing input.

Next Initial Items to complete:
- WIP - Pass SessionData to menu system now
- WIP - Add Output i/o for Esc Sequences, MCI Code Parsing and ANSI Screens.
- Test CP437 to UTF-8 output translations for *Nix/OSX terminal display.
- Finish building Menu Editor and System Configuration
- Start on Feature of the core menu system reading and handling commands
  And light bars.  Initial menu will start on Matrix for testing.

Change Log Update
* 2015-09-20 SessionData Object And Core IO - WIP.
+ Most of the core IO has been moved over from the base Session class.
  Session data will link the StateMachine with session so that it
  can change the state from within any interface. The Base Sessions
  keep pointers through the session alive and are kept alive itself via
  the Broad_caster.
- Lots of work to rewrite the shutdown process. Now that the core IO is
  In the SessionDate, this allows it to be passed and used through the entire system.
  However, it now keep has it own Broad_caster link to keep node communication available.
  Since this link is in both the Session and SessionData,  we can't just stop
  and let all of the destructors work down. We now have to loop through all
  connections and disconnect them all first to properly release the smart pointers,
  then we can call the final io_service shutdown. Working some difference ideas
  to handle this now after researching.

Change Log Update
* 2015-09-19 Start of new SessionData Object
+ Doing callbacks in the main Session Class loop then passing buffers
  through each state and retrieving output back the same way with several
  layers is very cumbersome! The new SessionData object using smart
  pointers spawning per session and link the base io_session, and hold all
  session specific data. This new object will then be passed through to
  each state, then off to each menu, menu's method so that IO can be used
  and accessed easily within the direct methods instead of data passed
  through several layers.  This is how I envisioned the IO would work, just
  took quite some time to get here properly learning ASIO since all examples
  work with the base class, it took some time to learn creating, passing
  with enabled_share_this() to other areas.
- Initial Output tested good, can now try moving the input to the new object
  with a Deadline timer for ESC sequence parsing.  Then add in pipe2ansi
  functions for colonizing the output.

Change Log Update
* 2015-09-17 InputField processing III
+ Fixed InputField Issue, Not a bug in EtherTerm.  Issue was with fast key
  presses, the buffer had more then one key press.  The new system loops
  each incoming key and waits for a return from the method to push to the
  screen if it's a valid key and not in the middle of ESC sequence. So
  This now catches characters in the middle of loop.. to make sure it
  catches everything to output.

Change Log Update
* 2015-09-17 InputField processing II
+ Found bug in EntherTerm! GetLine processing is working correctly.
+ Working on InputField Generate, which will take the prompt, add a lightbar
  Input field after the string for the length of the field, and pre-populate
  with any text like when sending an email.. Email to: Mercyful Fate  will
  then pre populate The input field with a foreground and back color.

Change Log Update
* 2015-09-17 InputField processing I
+ Added Conversion from ESC Sequence to named string, ie ESC[A = up_arrow.
  Makes translations from different key mapping easier to handle.
  Thanks to Bryan for the extra rxvt sequences.
+ Completed single Key / ESC Sequence GetKey functions.
  Input is parsed for ESC determining is ESC has follow up sequence.  If
  a sequence is detected it continues gathering the remainder of the
  sequence returning an ESC to notify either ESC key or Sequence.
  When it's a sequence the m_escape_sequence buffer will be empty for
  a single ESC key, or populated with the string translation ie.. up_arrow.
- WIP InputField Processing. This uses the above GetKey Translations
  and loops input on fields until an [ENTER] is received.  Handles ESC
  to Abort field, CTRL+Y Clear and start over and BS/DEL to erase
  characters.  Working out ASCII and UTF-8 friendly support.
  WIP BS/DEL or erasing needs a little more tweaking. Made lots of progress.

Change Log Update
* 2015-09-16 Async ESC Sequence Parsing
- Working out issues with breaking data asynchronously into ESC sequence
  patterns when characters are originally split first by ASCII vs UTF-8,
  are only sent through one at a time. A Mechanism needs to be used to
  notify if there is more data to determine if its an ESC vs. start of a
  sequence.
  NOTE: I don't like passing flags through classes for this.
+ Worked out ESC issue, on lone ESC key, we'll follow-up with a null '\0'
  right after to ESC to signal it's a lone ESC key after deadline checking.
  NULLS are parsed out on all incoming data, so this is perfect to
  single the end of a special character internally.
+ ESC vs ESC Sequences tested good with single and multiple sequences.
  With and without deadline checking. Looks like were good to continue
  more interface work at last!

Change Log Update
* 2015-09-15 Menu Editor
- Working on the Menu Editor input handling.  Added toggle for line or
  Hotkey input.  Default in OBV/2 is line input in most menus with
  Hotkey during pull down menus.  This will be a toggle for an added
  feature.

Change Log Update
* 2015-09-14 Input Processing
+ Added a Deadline timer per session. This is needed when the last char
  received is an ESC.  We need the ability to detect single ESC vs
  an ESC sequence. Lag over the Internet can receive broken sequences
  ESC in one read(), then [A in the next read().  With the timer, any
  time we receive an ESC by itself we wait 400 milliseconds for any follow
  up sequence.  Otherwise it's registered as a lone ESC key.
  Without this, function key sequence can register as an ESC and exit allot
  of interfaces causing issues!

Change Log Update
* 2015-09-13 Menu Editor
+ Working on Menu Editor and Input parsing, with toggle for line or hotkey
  input for menu interfaces.  Still WIP.

Change Log Update
* 2015-09-08 Smart Pointers
+ Worked out some smart pointer passing issues with the state
  machine and passing session data from interfaces back to the users
  from inside different states.

Change Log Update
* 2015-09-07 Menu Editor
+ Complete Initial Menu Directory parsing, and formatting the screen to
  dynamically display all available menus for editing.
  Working on Edit, Save, Add, Delete options now.

Change Log Update
* 2015-09-06 Started Menu I/O
+ Reading of MenuInfo and MenuOption Structs in .MNU files completed.
- Started working on Editor, will add some extra options for ? in CKeys
  to list all available with small descriptions when there is time.
  Makes it easier to mod.

Change Log Update
* 2015-09-04 More State Machine and I/O
+ Worked out functionality of StateMachine will derive a menu system
  States will now involve more complete systems instead of sub modules
  Eg.. System State (BBS), Chat State (Sysop/Teleconference,
  WFC State (Waiting for Callers, stats, node snooping).
  Each state will have a Menu system for handing commands and lightbars.
+ The State/MenuManager will loop incoming strings of data, parse single
  ASCII characters vs UTF-8 multi-byte characters and feed them one
  at a time through to each interface. Interfaces will then be able to
  parse sequences ASCII, ESC, or multi-byte sequences as needed.
+ Added some basic Node Tracking for sessions.  This way we can tell  who is
  on which node, and also match these numbers to sessions for notifications
  and chat and door games.
+ Started adding output for default out and translated CP347 to UTF-8 for
  terminals.  Eventually will look at encoding for other 8 bit types like
  ISO-8859-1, etc.. However, most of these do not do block and line
  drawing for ANSI.  At this time I'm keeping CP437 and UTF-8 with
  possible expansions later on. (Keep it simple for now).
+ Starting on Menu Editor that will read and edit original OBV/2 menu files
  Goal is to handle menus and data exactly as OBV/2 does, then expand later
  on as needed and enrich it.  To also allow full working menu from OBV/2
  systems with compatibility for all mods and custom work.

Change Log Update
* 2015-09-02 Working on Sessions and State Machine
+ Each session now includes its own State Machine.  In this instance a state
  Machine contains a base class, while each module will become a derived
  class.  For Example, CONFIG, LOGIN, MESSAGES, FILES will each have its own
  state and become a derived state class.
+ After lots of tinkering it's been decided (with possible future changes)
  to handle each state module in the following as we do not want to loop for
  Data or input inside any of the state modules.  The Session will pass all
  client input through the update() method.  The update() method will then
  process the input and return all output to the state_machine
  or ie..The Manager.  which will then send all outback to the screen for
  the user to see the interaction awaiting input.
- Question on Changing the State from within a state.  Looking at the best
  way to handle state switching.  If we want to keep communication with a list
  of each session, and when their state changes.  This way when in multi-node
  or who's on, we can easily list the users, and which state/module or action
  they are in.  I'm leaning more towards this, but need to test this out.

Change Log Update
* 2015-09-01 Working in Input character decoding.
+ Working on Input Parsing.  WIP
  - Completed Loop that reads buffer after Telnet Opts are parsed out
  - Next Checks for complete single characters ASCII vs UTF-8
  - Returns char commands or ESC with buffered ESC sequence for Function Keys
  - Tricky as original code was looking at TTY in *nix, now rewriting to
    read buffered socket data directly.
+ Cleaned up some File naming
+ WIP handle_character_sequencing(), this need to loop all incoming data
  splitting out characters from sequences.  But also need to keep static
  track of where it left off so no sequences or multi-byte characters
  are lost.
+ Working on State Machine, each interface will be separated into states
  where the sessions will be passed and update() will be looped to process
  input when data is received.
- NOTE: Still need to research async_wait() within a session and not main
  thread. Need to add timeouts per session.

Change Log Update
* 2015-08-31 OBV/2 Data Structure (Initial Version 2.30) 2.35, 2.4x will follow
  For Data Conversions.
+ Completed Data Structures for MenuInfo, MenuOption, FileArea,
  FileRecord, Protocol
+ Structures Completed so far w/ read/write function template:
  Statistics
  WFCO
  InfoformData
  ConfigRecord
  FDesAttrType
  EmailMessageRecord
  UserRecord
  MenuOption
  MenuInfo
  FileArea
  FileRecord
  Protocol

Change Log Update
* 2015-08-30 Session State
+ Adding Session State to tell if incoming data is for commands or
  session/global chat.
+ Added session tracking for input and output character encoding
  Sessions start with CP437 default. I will try to test and add support
  for other options such as ISO-8859-1 etc.. Although they don't display ANSI
  options are nice to have later on.  Otherwise the main defaults are CP437
  and UTF-8.
+ Output encoding will default to CP437 on ANSI term detection, UTF-8 on XTERM
  With global toggles between the two output translations.  Input will default to
  UTF-8, with toggles for CP437 for pasting ANSI graphics characters.

Change Log Update
* 2015-08-29 Encryption support for internal and user passwords.
+ Data should be encrypted before saved to sqlite3.

Change Log Update
* 2015-08-28 SQlite3 support for data.
+ Working in custom version of SqliteWrapped. Initial compile is now building
  in Windows, now testing reading and writing Unicode strings to the database.

Change Log Update
* 2015-08-27 Unicode or UTF-8 Internal support.
+ Started adding experimental methods for UTF-8. Originally tested in Linux
  and ported to Windows for OBV/2. Custom build of Boost with ICU for Boost
  boundary and translations for Windows.  Allot of extra work to compile with
  MingW32.

Change Log Update
* 2015-08-25 Working on Telnet Command and Option Replies and Responses.
+ Worked out TELNET OPTS for TTYPE, NAWS, LINEMODE toggle off for Linux.
  completed connect tests in windows, Linux and OS/x terminals.

Change Log Update
* 2015-08-17 Started logging updates and changes
+ Added Communicator Class with SafeQueue for global messaging between
  sessions and the system operator.
+ Updated Telnet Option Parsing, Added Containers for Reply and Active.
  Waiting for reply avoid sending reply's on responses. Active will heep track
  of options agreed upon between client and server.
+ Working on adding TTYPE and NAWS parsing. Have initial stages completed.

Ideas:
+ Global Trivial that can display random questions and let users answer from
  any subsystem. Also keeping ongoing totals and counts through the week
  pre-determined time frame.

+ Global Chat / Teleconference like IRC where users can chat, ANSI draw together,
  and transfer files.


===============================================================================

MAIN GOAL
Need to create Configuration editors for System / Menus.
Have to be able to edit menus and commands!

Post of Initial Change Log, and some extra ideas.. for later reference.. :)
Short term and some Long term goals, the idea is to hit as many of the short
term as possible to get the initial interfaces going.

Completed:
1. Initial Telnet Server

2. Telnet Command/Option Parsing
   + Negotiations for Terminal Type, Screen Size, and Key at a Time input.
   + Individual Sessions in single thread with asynchronous i/o.
   + global communication room for sending messages to all users connected.
   + ability for sysop console to send messages to all nodes.
   - WIP, need to separate this out to chat per sessions and sysop per
     individual session.

Short Term Goals:
1. Get Full Incoming Data parsing completed.
   + CP437 -> Utf8
   + Parse ESC and Function Keys Sequences
   + Toggles for Output Encoding
   + Toggles for Key-map encoding for BS/DEL between Windows and *Nix platforms.

2. ANSI and output Translations
   + ANSI output from screens w/ Delay on MCI code for welcome and various screens
   + Translations for CP437 ANSI files to UTF-8 for Terminals and international clients.

3. Basic Menu system to Mimic the Matrix login
   + Goal is to handle commands parsing, MCI code parsing and light-bars.

4. Global chat room interface, and split screen sysop/user chat.

5. WFC (Waiting for Caller) Interface for configuration and node chat/viewing.

Long Term Goals:
1. Telnet server options for ignoring bad IP's and too many connections from the
   same IP address.
2. Full OBV/2 Menu command and light-bar emulations.
   Support for Stacked commands along with fall back menu
   - Extra new support added for listing descriptive commands top/down in
     scrolling interface.
3. Full OBV/2 Data Area support for custom mods
4. Full Message and File Area with transfer protocols.
